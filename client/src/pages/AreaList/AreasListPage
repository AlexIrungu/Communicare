import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

function AreasListPage() {
  const [areas, setAreas] = useState([]);
  const [filteredAreas, setFilteredAreas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Filter states
  const [searchQuery, setSearchQuery] = useState('');
  const [regionFilter, setRegionFilter] = useState('');
  const [severityFilter, setSeverityFilter] = useState('');
  
  // Available filter options
  const [regions, setRegions] = useState([]);

  useEffect(() => {
    const fetchAreas = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/v1/areas/high_risk');
        setAreas(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load affected areas. Please try again later.');
        setLoading(false);
      }
    };
  
    fetchAreas();
  }, []);

  // Apply filters whenever filter states change
  useEffect(() => {
    let result = [...areas];
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(area => 
        area.name.toLowerCase().includes(query) || 
        area.region?.toLowerCase().includes(query)
      );
    }
    
    if (regionFilter) {
      result = result.filter(area => area.region === regionFilter);
    }
    
    if (severityFilter) {
      switch (severityFilter) {
        case 'high':
          result = result.filter(area => parseInt(area.severity_index) > 70);
          break;
        case 'medium':
          result = result.filter(area => 
            parseInt(area.severity_index) >= 40 && parseInt(area.severity_index) <= 70
          );
          break;
        case 'low':
          result = result.filter(area => parseInt(area.severity_index) < 40);
          break;
        default:
          break;
      }
    }
    
    setFilteredAreas(result);
  }, [areas, searchQuery, regionFilter, severityFilter]);

  if (loading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-center items-center h-96">
          <div className="text-gray-500">Loading affected areas...</div>
        </div>
      </div>
    );
  }

  const getSeverityColor = (severity) => {
    const severityNum = parseInt(severity) || 0;
    if (severityNum > 70) return 'bg-red-50';
    if (severityNum > 40) return 'bg-yellow-50';
    return 'bg-green-50';
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">Affected Areas</h1>
        <p className="text-lg text-gray-600 max-w-3xl mx-auto">
          Explore regions affected by communicable diseases worldwide and learn how you can
          support prevention and treatment efforts in these communities.
        </p>
      </div>
      
      <div className="flex flex-col md:flex-row gap-4 mb-8">
        <select 
          className="form-select rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          value={regionFilter}
          onChange={(e) => setRegionFilter(e.target.value)}
        >
          <option value="">All Regions</option>
          {regions.map(region => (
            <option key={region} value={region}>{region}</option>
          ))}
        </select>
        
        <select
          className="form-select rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          value={severityFilter}
          onChange={(e) => setSeverityFilter(e.target.value)}
        >
          <option value="">All Severity Levels</option>
          <option value="high">High Severity</option>
          <option value="medium">Medium Severity</option>
          <option value="low">Low Severity</option>
        </select>
        
        <input
          type="text"
          placeholder="Search areas..."
          className="flex-1 rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>
      
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-8 text-red-700 rounded">
          {error}
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredAreas.length === 0 ? (
          <div className="col-span-full text-center bg-gray-50 rounded-lg p-8">
            <p className="text-gray-600">
              No affected areas match your search criteria. Try adjusting your filters.
            </p>
          </div>
        ) : (
          filteredAreas.map(area => (
            <div key={area.id} className="bg-white rounded-lg shadow-md overflow-hidden transition-transform hover:-translate-y-1 hover:shadow-lg">
              <div className={`${getSeverityColor(area.severity_index)} px-6 py-4 border-b border-gray-200`}>
                <h2 className="text-xl font-semibold text-gray-900">{area.name}</h2>
                <div className="text-sm text-gray-600">{area.region || 'Unknown region'}</div>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-red-600">
                      {area.cases_count?.toLocaleString() || 0}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">Reported Cases</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-orange-500">
                      {area.mortality_rate || 0}%
                    </div>
                    <div className="text-sm text-gray-600 mt-1">Mortality Rate</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {area.population?.toLocaleString() || 'N/A'}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">Population</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {area.recovery_rate || 0}%
                    </div>
                    <div className="text-sm text-gray-600 mt-1">Recovery Rate</div>
                  </div>
                </div>
                
                {area.diseases && area.diseases.length > 0 && (
                  <div className="mb-6">
                    <div className="text-sm text-gray-700 mb-2">Prevalent diseases:</div>
                    <div className="flex flex-wrap gap-2">
                      {area.diseases.map(disease => (
                        <span 
                          key={disease.id}
                          className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full"
                        >
                          {disease.name}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                
                <Link
                  to={`/areas/${area.id}`}
                  className="block w-full text-center bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                  View Details
                </Link>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
}

export default AreasListPage;